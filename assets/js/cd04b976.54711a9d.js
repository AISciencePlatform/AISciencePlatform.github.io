"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[457],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),f=i,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||o;return r?n.createElement(d,a(a({ref:t},p),{},{components:r})):n.createElement(d,a({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},186:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const o={sidebar_position:1},a="Overall Strategy",s={unversionedId:"Simulations/overall-strategy",id:"Simulations/overall-strategy",title:"Overall Strategy",description:"The simulation of our robotic platform is addressed using two different environments, namely CoppeliaSim, and Isaac Sim. The former one is mainly used to define geometric primitives, useful to prevent (self)-collisions by means of the VFIs framework. The latter implements a digital twin, and it is used to train operators before using the real platform. Both environments run on the Windows computer, which is equipped with a Intel i9-12900K with 64GB RAM and a GPU Nvidia RTX A6000.",source:"@site/docs/Simulations/overall-strategy.md",sourceDirName:"Simulations",slug:"/Simulations/overall-strategy",permalink:"/docs/Simulations/overall-strategy",draft:!1,editUrl:"https://github.com/AISciencePlatform/AISciencePlatform/docs/Simulations/overall-strategy.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Simulations",permalink:"/docs/category/simulations"},next:{title:"CoppeliaSim",permalink:"/docs/Simulations/coppelia-sim"}},l={},c=[],p={toc:c};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overall-strategy"},"Overall Strategy"),(0,i.kt)("img",{src:"/img/scheme.png",alt:"drawing",width:"800"}),(0,i.kt)("p",null,"The simulation of our robotic platform is addressed using two different environments, namely ",(0,i.kt)("a",{parentName:"p",href:"https://www.coppeliarobotics.com/"},"CoppeliaSim"),", and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.nvidia.com/isaac-sim"},"Isaac Sim"),". The former one is mainly used to define geometric primitives, useful to prevent (self)-collisions by means of the VFIs framework. The latter implements a digital twin, and it is used to train operators before using the real platform. Both environments run on the Windows computer, which is equipped with a Intel i9-12900K with 64GB RAM and a GPU Nvidia RTX A6000."))}m.isMDXComponent=!0}}]);